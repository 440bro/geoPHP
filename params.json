{"name":"GeoPHP","tagline":"The world's most popular geospatial library for PHP","body":"﻿GeoPHP is a open-source native PHP library for doing geometry operations. It is written entirely in PHP and \r\ncan therefore run on shared hosts. It can read and write a wide variety of formats: WKT (including EWKT), WKB (including EWKB), GeoJSON, \r\nKML, GPX, GeoRSS). It works with all Simple-Feature geometries (Point, LineString, Polygon, GeometryCollection etc.)\r\nand can be used to get centroids, bounding-boxes, area, and a wide variety of other useful information. \r\n\r\ngeoPHP also helpfully wraps the GEOS php extension so that applications can get a transparent performance \r\nincrease when GEOS is installed on the server. When GEOS is installed, geoPHP also becomes\r\nfully compliant with the OpenGIS® Implementation Standard for Geographic information. With GEOS you get the \r\nfull-set of openGIS functions in PHP like Union, IsWithin, Touches etc. This means that applications\r\nget a useful \"core-set\" of geometry operations that work in all environments, and an \"extended-set\"of operations \r\nfor environments that have GEOS installed. \r\n\r\nSee the 'getting started' section below for references and examples of everything that geoPHP can do.\r\n\r\nThis project is currently looking for co-maintainers. If you think you can help out, please send me a \r\nmessage. Forks are also welcome, please issue pull requests and I will merge them into the main branch.\r\n\r\nGetting Started\r\n-----------------------\r\n\r\n * The lastest stable version can always be downloaded at: <https://github.com/downloads/phayes/geoPHP/geoPHP.tar.gz>\r\n * Read the API Reference at: <https://github.com/phayes/geoPHP/wiki/API-Reference>\r\n * Examples\r\n   * Using geoPHP as a GIS format converter: <http://github.com/phayes/geoPHP/wiki/Example-format-converter>\r\n * Other Interesting Links:\r\n   * Learn about GEOS integration at: <https://github.com/phayes/geoPHP/wiki/GEOS>\r\n\r\nExample usage\r\n-------------------------------------------------\r\n\r\n```php\r\n<?php\r\ninclude_once('geoPHP.inc');\r\n\r\n// Polygon WKT example\r\n$polygon = geoPHP::load('POLYGON((1 1,5 1,5 5,1 5,1 1),(2 2,2 3,3 3,3 2,2 2))','wkt');\r\n$area = $polygon->getArea();\r\n$centroid = $polygon->getCentroid();\r\n$centX = $centroid->getX();\r\n$centY = $centroid->getY();\r\n\r\nprint \"This polygon has an area of \".$area.\" and a centroid with X=\".$centX.\" and Y=\".$centY;\r\n\r\n// MultiPoint json example\r\nprint \"<br/>\";\r\n$json = \r\n'{\r\n   \"type\": \"MultiPoint\",\r\n   \"coordinates\": [\r\n       [100.0, 0.0], [101.0, 1.0]\r\n   ]\r\n}';\r\n\r\n$multipoint = geoPHP::load($json, 'json');\r\n$multipoint_points = $multipoint->getComponents();\r\n$first_wkt = $multipoint_points[0]->out('wkt');\r\n\r\nprint \"This multipoint has \".$multipoint->numGeometries().\" points. The first point has a wkt representation of \".$first_wkt;\r\n```\r\n=======\r\n\t\r\nMore Examples\r\n-------------------------------------------------\r\n\t\r\nThe Well Known Text (WKT) and Well Known Binary (WKB) support is ideal for integrating with MySQL's or PostGIS's spatial capability. \r\nOnce you have SELECTed your data with `'AsText('geo_field')'` or `'AsBinary('geo_field')'`, you can put it straight into \r\ngeoPHP (can be wkt or wkb, but must be the same as how you extracted it from your database):\r\n\r\n    $geom = geoPHP::load($dbRow,'wkt');\r\n\r\nYou can collect multiple geometries into one (note that you must use wkt for this):\r\n\r\n    $geom = geoPHP::load(\"GEOMETRYCOLLECTION(\".$dbString1.\",\".$dbString2.\")\",'wkt');\r\n\r\nCalling get components returns the sub-geometries within a geometry as an array.\r\n\r\n    $geom2 = geoPHP::load(\"GEOMETRYCOLLECTION(LINESTRING(1 1,5 1,5 5,1 5,1 1),LINESTRING(2 2,2 3,3 3,3 2,2 2))\");\r\n    $geomComponents = $geom2->getComponents();    //an array of the two linestring geometries\r\n    $linestring1 = $geomComponents[0]->getComponents();\t//an array of the first linestring's point geometries\r\n    $linestring2 = $geomComponents[1]->getComponents();\r\n    echo $linestring1[0]->x() . \", \" . $linestring1[0]->y();    //outputs '1, 1'\r\n\r\nAn alternative is to use the `asArray()` method. Using the above geometry collection of two linestrings, \r\n    \r\n\t$geometryArray = $geom2->asArray();\r\n\techo $geometryArray[0][0][0] . \", \" . $geometryArray[0][0][1];    //outputs '1, 1'\r\n\r\nClearly, more complex analysis is possible.\r\n    \r\n\techo $geom2->envelope()->area();\r\n\r\n\r\nWorking with PostGIS\r\n---------------------\r\ngeoPHP, through it's EWKB adapter, has good integration with postGIS. Here's an example of reading and writing postGIS geometries\r\n\r\n```php\r\n<?php\r\ninclude_once('geoPHP.inc');\r\n$host =     'localhost';\r\n$database = 'phayes';\r\n$table =    'test';\r\n$column =   'geom';\r\n$user =     'phayes';\r\n$pass =     'supersecret';\r\n\r\n$connection = pg_connect(\"host=$host dbname=$database user=$user password=$pass\");\r\n\r\n// Working with PostGIS and Extended-WKB\r\n// ----------------------------\r\n\r\n// Using asBinary and GeomFromWKB in PostGIS\r\n$result = pg_fetch_all(pg_query($connection, \"SELECT asBinary($column) as geom FROM $table\"));\r\nforeach ($result as $item) {\r\n  $wkb = pg_unescape_bytea($item['geom']); // Make sure to unescape the hex blob\r\n  $geom = geoPHP::load($wkb, 'ewkb'); // We now a full geoPHP Geometry object\r\n  \r\n  // Let's insert it back into the database\r\n  $insert_string = pg_escape_bytea($geom->out('ewkb'));\r\n  pg_query($connection, \"INSERT INTO $table ($column) values (GeomFromWKB('$insert_string'))\");\r\n}\r\n\r\n// Using a direct SELECT and INSERTs in PostGIS without using wrapping functions\r\n$result = pg_fetch_all(pg_query($connection, \"SELECT $column as geom FROM $table\"));\r\nforeach ($result as $item) {\r\n  $wkb = pack('H*',$item['geom']);   // Unpacking the hex blob\r\n  $geom = geoPHP::load($wkb, 'ewkb'); // We now have a geoPHP Geometry\r\n  \r\n  // To insert directly into postGIS we need to unpack the WKB\r\n  $unpacked = unpack('H*', $geom->out('ewkb'));\r\n  $insert_string = $unpacked[1];\r\n  pg_query($connection, \"INSERT INTO $table ($column) values ('$insert_string')\");\r\n}\r\n```\r\n\r\n\r\nCredit\r\n-------------------------------------------------\r\n\r\nMaintainer: Patrick Hayes\r\n\r\nAdditional Contributors:\r\n\r\n * GeoMemes Research (<http://www.geomemes.com>)\r\n * HighWire Press (<http://www.highwire.org>) and GeoScienceWorld (<http://www.geoscienceworld.org>)\r\n * Arnaud Renevier (gisconverter.php) <https://github.com/arenevier/gisconverter.php>\r\n * Dave Tarc <https://github.com/dtarc>\r\n * Elliott Hunston (documentation) <https://github.com/ejh>\r\n\r\nThis library is open-source and dual-licensed under both the Modified BSD License and GPLv2. Either license may be used at your option.           \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}